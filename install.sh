#!/bin/sh
set -e

DOTFILES="$(dirname "$(realpath "$0")")"
TARGET="$HOME"

[ -f "$DOTFILES/config.local" ] && . "$DOTFILES/config.local"
GIT_USER="${GIT_USER:-Fernando Schauenburg}"
GIT_EMAIL="${GIT_EMAIL:-fernando@schauenburg.me}"

main() {
    IS_DRY_RUN=yes
    while getopts 'fht:' opt; do case "$opt" in
        f) unset IS_DRY_RUN;;
        t) TARGET="$OPTARG";;
        h) usage; exit 0;;
        *) usage; exit 1;;
    esac done

    greeting
    stow_packages
    git_user_config
    nvim_plugins
}

greeting() {
    dry_run && {
        warn "Performing dry run (use -f to actually make changes)."
        warn
    }

    info "Deploying dotfiles:"
    info "  Source: $cyan$DOTFILES$rst"
    info "  Target: $cyan$TARGET$rst"
    info "  Git user: $yellow$GIT_USER <$GIT_EMAIL>$rst"

    [ -t 0 ] && {
        info
        info "Press ENTER to continue (CTRL-C to cancel)..."
        read k
    }
}

stow_packages() {
    heading 'stow packages'
    stow -v${IS_DRY_RUN:+n} --no-folding -d "$DOTFILES" -t "$TARGET" \
        alacritty   \
        bin         \
        git         \
        jupyter     \
        mintty      \
        misc        \
        nvim        \
        python      \
        readline    \
        ssh         \
        tmux        \
        x11         \
        zsh         \
        2>&1 | sed -E -e "s/^([^:]+:)/$yellow\1$rst/" -e "s/=>/$blue=>$rst/"
}

git_user_config() {
    heading 'git user configuration'
    config_file="$TARGET/.local/etc/git/config.user"
    temp_git="$(mktemp)"
    cat >"$temp_git" <<EOF
#         *************************************
#         *       DO NOT EDIT THIS FILE       *
#         *************************************
#
# This file was generated by the bootstrap script and any changes will be
# overwritten the next time it is run. For local settings, use this instead:
#
#   ~/.local/etc/git/config
#
EOF
    git config -f "$temp_git" user.name "${GIT_USER}"
    git config -f "$temp_git" user.email "${GIT_EMAIL}"

    diff "$config_file" "$temp_git" >/dev/null 2>&1 || {
        echo "${yellow}OVERWRITE:$rst $config_file with $temp_git:"
        echo "$cyan"
        cat "$temp_git"
        echo "$rst"
        dry_run || cp -f "$temp_git" "$config_file"
    }
}

nvim_plugins() {
    heading 'nvim plugins'
    if command -v nvim >/dev/null 2>&1; then
        dry_run || {
            warn "installing neovim plugins..."
            nvim --headless -c 'autocmd User PackerComplete quitall' -c 'PackerSync'
        }
    else
        error "neovim is not installed; skipping plugin installation..."
    fi
}

###############################################################################
# Helper Functions
###############################################################################

if [ -t 1 ]; then
    rst=$(tput      sgr0)
    red=$(tput      setaf  1)
    green=$(tput    setaf  2)
    yellow=$(tput   setaf  3)
    blue=$(tput     setaf  4)
    magenta=$(tput  setaf  5)
    cyan=$(tput     setaf  6)
else
    rst=''
    red=''
    green=''
    yellow=''
    blue=''
    magenta=''
    cyan=''
fi

dry_run() { [ -n "$IS_DRY_RUN" ]; }

usage() {
    echo "Usage: $(basename $0) [-h] [-f] [-t <target>]"
    echo ""
    echo "  -h  print this help and exit"
    echo "  -f  modify filesystem rather than dry run"
    echo "  -t  set <target> directory (default: \$HOME)"
}

heading()   { printf '%s\n' "${blue}=====  $1  ==========${rst}"; }
info()      { printf '%s ' "$@";                            printf '\n'; }
warn()      { printf '%s ' "${yellow}$@${rst}";             printf '\n'; }
error()     { printf '%s ' "${red}$@${rst}";                printf '\n'; }

main "$@"
